// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Exemple de modèles pour votre application UGC
model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String?
  password      String
  role          String    @default("user") // "user" ou "admin"
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  projects      Project[]
  comments      Comment[]
  
  @@map("users")
}

model Project {
  id            String    @id @default(uuid())
  title         String
  description   String?
  videoUrl      String?
  imageUrl      String?
  category      String    // "ugc", "publicitaire", "spot"
  featured      Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  comments      Comment[]
  media         ProjectMedia[]
  
  @@map("projects")
}

model Comment {
  id            String    @id @default(uuid())
  content       String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  projectId     String
  project       Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  parentId      String?   // Pour les réponses
  parent        Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies       Comment[] @relation("CommentReplies")
  
  @@map("comments")
}

// Modèles pour le dashboard et le chat
model Conversation {
  id              String    @id @default(uuid())
  userId          String
  userName        String
  hasAppointment  Boolean   @default(false)
  hasCallScheduled Boolean  @default(false)
  hasOrderPlaced  Boolean   @default(false)
  lastActivity    DateTime  @default(now())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  messages        ChatMessage[]
  orders          Order[]
  appointments    Appointment[]
  
  @@index([userId])
  @@index([lastActivity])
  @@map("conversations")
}

model ChatMessage {
  id              String      @id @default(uuid())
  sender          String      // "user" ou "bot"
  text            String
  timestamp       DateTime    @default(now())
  
  conversationId  String
  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@index([conversationId])
  @@index([timestamp])
  @@map("chat_messages")
}

model Order {
  id              String      @id @default(uuid())
  clientName      String
  type            String
  status          String      // "confirmed", "pending", "cancelled", "delivered"
  date            DateTime    @default(now())
  
  conversationId  String
  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@index([conversationId])
  @@index([status])
  @@map("orders")
}

model Appointment {
  id              String      @id @default(uuid())
  clientName      String
  date            DateTime
  time            String
  service         String
  status          String      // "confirmed", "pending", "cancelled", "completed"
  
  conversationId  String
  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@index([conversationId])
  @@index([date])
  @@map("appointments")
}

// Modèle pour améliorer Project avec plus de détails
// Supprimant les champs commentés car ils interfèrent avec le modèle existant

model ProjectMedia {
  id          String   @id @default(uuid())
  mediaUrl    String
  mediaType   String   // "image" ou "video"
  isThumbnail Boolean  @default(false)
  
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@index([projectId])
  @@map("project_media")
}

